class BinanceSocketManager(threading.Thread)
 |  BinanceSocketManager(client, user_timeout=1800)
 |  
 |  A class that represents a thread of control.
 |  
 |  This class can be safely subclassed in a limited fashion. There are two ways
 |  to specify the activity: by passing a callable object to the constructor, or
 |  by overriding the run() method in a subclass.
 |  
 |  Method resolution order:
 |      BinanceSocketManager
 |      threading.Thread
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, client, user_timeout=1800)
 |      Initialise the BinanceSocketManager
 |      
 |      :param client: Binance API client
 |      :type client: binance.Client
 |      :param user_timeout: Custom websocket timeout
 |      :type user_timeout: int
 |  
 |  close(self)
 |      Close all connections
 |  
 |  run(self)
 |      Method representing the thread's activity.
 |      
 |      You may override this method in a subclass. The standard run() method
 |      invokes the callable object passed to the object's constructor as the
 |      target argument, if any, with sequential and keyword arguments taken
 |      from the args and kwargs arguments, respectively.
 |  
 |  start_aggtrade_socket(self, symbol, callback)
 |      Start a websocket for symbol trade data
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#aggregate-trade-streams
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "e": "aggTrade",                # event type
 |              "E": 1499405254326,             # event time
 |              "s": "ETHBTC",                  # symbol
 |              "a": 70232,                             # aggregated tradeid
 |              "p": "0.10281118",              # price
 |              "q": "8.15632997",              # quantity
 |              "f": 77489,                             # first breakdown trade id
 |              "l": 77489,                             # last breakdown trade id
 |              "T": 1499405254324,             # trade time
 |              "m": false,                             # whether buyer is a maker
 |              "M": true                               # can be ignored
 |          }
 |  
 |  start_book_ticker_socket(self, callback)
 |      Start a websocket for the best bid or ask's price or quantity for all symbols.
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#all-book-tickers-stream
 |      
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              // Same as <symbol>@bookTicker payload
 |          }
 |  
 |  start_depth_socket(self, symbol, callback, depth=None)
 |      Start a websocket for symbol market depth returning either a diff or a partial book
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#partial-book-depth-streams
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      :param depth: optional Number of depth entries to return, default None. If passed returns a partial book instead of a diff
 |      :type depth: str
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Partial Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "lastUpdateId": 160,  # Last update ID
 |              "bids": [             # Bids to be updated
 |                  [
 |                      "0.0024",     # price level to be updated
 |                      "10",         # quantity
 |                      []            # ignore
 |                  ]
 |              ],
 |              "asks": [             # Asks to be updated
 |                  [
 |                      "0.0026",     # price level to be updated
 |                      "100",        # quantity
 |                      []            # ignore
 |                  ]
 |              ]
 |          }
 |      
 |      
 |      Diff Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "e": "depthUpdate", # Event type
 |              "E": 123456789,     # Event time
 |              "s": "BNBBTC",      # Symbol
 |              "U": 157,           # First update ID in event
 |              "u": 160,           # Final update ID in event
 |              "b": [              # Bids to be updated
 |                  [
 |                      "0.0024",   # price level to be updated
 |                      "10",       # quantity
 |                      []          # ignore
 |                  ]
 |              ],
 |              "a": [              # Asks to be updated
 |                  [
 |                      "0.0026",   # price level to be updated
 |                      "100",      # quantity
 |                      []          # ignore
 |                  ]
 |              ]
 |          }
 |  
 |  start_kline_socket(self, symbol, callback, interval='1m')
 |      Start a websocket for symbol kline data
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#klinecandlestick-streams
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      :param interval: Kline interval, default KLINE_INTERVAL_1MINUTE
 |      :type interval: str
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "e": "kline",                                   # event type
 |              "E": 1499404907056,                             # event time
 |              "s": "ETHBTC",                                  # symbol
 |              "k": {
 |                  "t": 1499404860000,                 # start time of this bar
 |                  "T": 1499404919999,                 # end time of this bar
 |                  "s": "ETHBTC",                              # symbol
 |                  "i": "1m",                                  # interval
 |                  "f": 77462,                                 # first trade id
 |                  "L": 77465,                                 # last trade id
 |                  "o": "0.10278577",                  # open
 |                  "c": "0.10278645",                  # close
 |                  "h": "0.10278712",                  # high
 |                  "l": "0.10278518",                  # low
 |                  "v": "17.47929838",                 # volume
 |                  "n": 4,                                             # number of trades
 |                  "x": false,                                 # whether this bar is final
 |                  "q": "1.79662878",                  # quote volume
 |                  "V": "2.34879839",                  # volume of active buy
 |                  "Q": "0.24142166",                  # quote volume of active buy
 |                  "B": "13279784.01349473"    # can be ignored
 |                  }
 |          }
 |  
 |  start_margin_socket(self, callback)
 |      Start a websocket for margin data
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/user-data-stream.md
 |      
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format - see Binance API docs for all types
 |  
 |  start_miniticker_socket(self, callback, update_time=1000)
 |      Start a miniticker websocket for all trades
 |      
 |      This is not in the official Binance api docs, but this is what
 |      feeds the right column on a ticker page on Binance.
 |      
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      :param update_time: time between callbacks in milliseconds, must be 1000 or greater
 |      :type update_time: int
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  'e': '24hrMiniTicker',  # Event type
 |                  'E': 1515906156273,     # Event time
 |                  's': 'QTUMETH',         # Symbol
 |                  'c': '0.03836900',      # close
 |                  'o': '0.03953500',      # open
 |                  'h': '0.04400000',      # high
 |                  'l': '0.03756000',      # low
 |                  'v': '147435.80000000', # volume
 |                  'q': '5903.84338533'    # quote volume
 |              }
 |          ]
 |  
 |  start_multiplex_socket(self, streams, callback)
 |      Start a multiplexed socket using a list of socket names.
 |      User stream sockets can not be included.
 |      
 |      Symbols in socket name must be lowercase i.e bnbbtc@aggTrade, neobtc@ticker
 |      
 |      Combined stream events are wrapped as follows: {"stream":"<streamName>","data":<rawPayload>}
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md
 |      
 |      :param streams: list of stream names in lower case
 |      :type streams: list
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format - see Binance API docs for all types
 |  
 |  start_symbol_book_ticker_socket(self, symbol, callback)
 |      Start a websocket for the best bid or ask's price or quantity for a specified symbol.
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#individual-symbol-book-ticker-streams
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "u":400900217,     // order book updateId
 |              "s":"BNBUSDT",     // symbol
 |              "b":"25.35190000", // best bid price
 |              "B":"31.21000000", // best bid qty
 |              "a":"25.36520000", // best ask price
 |              "A":"40.66000000"  // best ask qty
 |          }
 |  
 |  start_symbol_ticker_socket(self, symbol, callback)
 |      Start a websocket for a symbol's ticker data
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#individual-symbol-ticker-streams
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "e": "24hrTicker",  # Event type
 |              "E": 123456789,     # Event time
 |              "s": "BNBBTC",      # Symbol
 |              "p": "0.0015",      # Price change
 |              "P": "250.00",      # Price change percent
 |              "w": "0.0018",      # Weighted average price
 |              "x": "0.0009",      # Previous day's close price
 |              "c": "0.0025",      # Current day's close price
 |              "Q": "10",          # Close trade's quantity
 |              "b": "0.0024",      # Best bid price
 |              "B": "10",          # Bid bid quantity
 |              "a": "0.0026",      # Best ask price
 |              "A": "100",         # Best ask quantity
 |              "o": "0.0010",      # Open price
 |              "h": "0.0025",      # High price
 |              "l": "0.0010",      # Low price
 |              "v": "10000",       # Total traded base asset volume
 |              "q": "18",          # Total traded quote asset volume
 |              "O": 0,             # Statistics open time
 |              "C": 86400000,      # Statistics close time
 |              "F": 0,             # First trade ID
 |              "L": 18150,         # Last trade Id
 |              "n": 18151          # Total number of trades
 |          }
 |  
 |  start_ticker_socket(self, callback)
 |      Start a websocket for all ticker data
 |      
 |      By default all markets are included in an array.
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#all-market-tickers-stream
 |      
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  'F': 278610,
 |                  'o': '0.07393000',
 |                  's': 'BCCBTC',
 |                  'C': 1509622420916,
 |                  'b': '0.07800800',
 |                  'l': '0.07160300',
 |                  'h': '0.08199900',
 |                  'L': 287722,
 |                  'P': '6.694',
 |                  'Q': '0.10000000',
 |                  'q': '1202.67106335',
 |                  'p': '0.00494900',
 |                  'O': 1509536020916,
 |                  'a': '0.07887800',
 |                  'n': 9113,
 |                  'B': '1.00000000',
 |                  'c': '0.07887900',
 |                  'x': '0.07399600',
 |                  'w': '0.07639068',
 |                  'A': '2.41900000',
 |                  'v': '15743.68900000'
 |              }
 |          ]
 |  
 |  start_trade_socket(self, symbol, callback)
 |      Start a websocket for symbol trade data
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#trade-streams
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "e": "trade",     # Event type
 |              "E": 123456789,   # Event time
 |              "s": "BNBBTC",    # Symbol
 |              "t": 12345,       # Trade ID
 |              "p": "0.001",     # Price
 |              "q": "100",       # Quantity
 |              "b": 88,          # Buyer order Id
 |              "a": 50,          # Seller order Id
 |              "T": 123456785,   # Trade time
 |              "m": true,        # Is the buyer the market maker?
 |              "M": true         # Ignore.
 |          }
 |  
 |  start_user_socket(self, callback)
 |      Start a websocket for user data
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/master/user-data-stream.md
 |      
 |      :param callback: callback function to handle messages
 |      :type callback: function
 |      
 |      :returns: connection key string if successful, False otherwise
 |      
 |      Message Format - see Binance API docs for all types
 |  
 |  stop_socket(self, conn_key)
 |      Stop a websocket given the connection key
 |      
 |      :param conn_key: Socket connection key
 |      :type conn_key: string
 |      
 |      :returns: connection key string if successful, False otherwise
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  DEFAULT_USER_TIMEOUT = 1800
 |  
 |  STREAM_URL = 'wss://stream.binance.com:9443/'
 |  
 |  WEBSOCKET_DEPTH_10 = '10'
 |  
 |  WEBSOCKET_DEPTH_20 = '20'
 |  
 |  WEBSOCKET_DEPTH_5 = '5'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from threading.Thread:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  getName(self)
 |  
 |  isAlive(self)
 |      Return whether the thread is alive.
 |      
 |      This method is deprecated, use is_alive() instead.
 |  
 |  isDaemon(self)
 |  
 |  is_alive(self)
 |      Return whether the thread is alive.
 |      
 |      This method returns True just before the run() method starts until just
 |      after the run() method terminates. The module function enumerate()
 |      returns a list of all alive threads.
 |  
 |  join(self, timeout=None)
 |      Wait until the thread terminates.
 |      
 |      This blocks the calling thread until the thread whose join() method is
 |      called terminates -- either normally or through an unhandled exception
 |      or until the optional timeout occurs.
 |      
 |      When the timeout argument is present and not None, it should be a
 |      floating point number specifying a timeout for the operation in seconds
 |      (or fractions thereof). As join() always returns None, you must call
 |      is_alive() after join() to decide whether a timeout happened -- if the
 |      thread is still alive, the join() call timed out.
 |      
 |      When the timeout argument is not present or None, the operation will
 |      block until the thread terminates.
 |      
 |      A thread can be join()ed many times.
 |      
 |      join() raises a RuntimeError if an attempt is made to join the current
 |      thread as that would cause a deadlock. It is also an error to join() a
 |      thread before it has been started and attempts to do so raises the same
 |      exception.
 |  
 |  setDaemon(self, daemonic)
 |  
 |  setName(self, name)
 |  
 |  start(self)
 |      Start the thread's activity.
 |      
 |      It must be called at most once per thread object. It arranges for the
 |      object's run() method to be invoked in a separate thread of control.
 |      
 |      This method will raise a RuntimeError if called more than once on the
 |      same thread object.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from threading.Thread:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  daemon
 |      A boolean value indicating whether this thread is a daemon thread.
 |      
 |      This must be set before start() is called, otherwise RuntimeError is
 |      raised. Its initial value is inherited from the creating thread; the
 |      main thread is not a daemon thread and therefore all threads created in
 |      the main thread default to daemon = False.
 |      
 |      The entire Python program exits when only daemon threads are left.
 |  
 |  ident
 |      Thread identifier of this thread or None if it has not been started.
 |      
 |      This is a nonzero integer. See the get_ident() function. Thread
 |      identifiers may be recycled when a thread exits and another thread is
 |      created. The identifier is available even after the thread has exited.
 |  
 |  name
 |      A string used for identification purposes only.
 |      
 |      It has no semantics. Multiple threads may be given the same name. The
 |      initial name is set by the constructor.
